.. Note, this was autogenerated, all changes will vanish...

Available JSON-RPC methods
==========================


.. attention::

    Only supported for Python versions 3.6 and above


version
-------

Get the version of benchmarkstt

:return str: BenchmarkSTT version

list.normalization
------------------

Get a list of available core normalization

:return object: With key being the normalization name, and value its description

normalization.config
--------------------

Use config file notation to define normalization rules. This notation is a
list of normalizers, one per line.

Each normalizer that is based needs a file is followed by a file name of a
csv, and can be optionally followed by the file encoding (if different than
default).
All options are loaded in from this csv and applied to the normalizer.

The normalizers can be any of the core normalizers, or you can refer to your
own normalizer class (like you would use in a python import, eg.
`my.own.package.MyNormalizerClass`).

Additional rules:
  - Normalizer names are case-insensitive.
  - Arguments MAY be wrapped in double quotes.
  - If an argument contains a space, newline or double quote, it MUST be
    wrapped in double quotes.
  - A double quote itself is represented in this quoted argument as two
    double quotes: `""`.

The normalization rules are applied top-to-bottom and follow this format:

.. code-block:: text

    # This is a comment

    # (Normalizer2 has no arguments)
    lowercase

    # loads regex expressions from regexrules.csv in "utf 8" encoding
    regex regexrules.csv "utf 8"

    # load another config file, [section1] and [section2]
    config configfile.ini section1
    config configfile.ini section2

    # loads replace expressions from replaces.csv in default encoding
    replace     replaces.csv

:param file: The config file
:param encoding: The file encoding
:param section: The subsection of the config file to use (if applicable)

:example text: "He bravely turned his tail and fled"
:example file: "./resources/test/normalizers/configfile.conf"
:example encoding: "UTF-8"
:example return: "ha bravalY Turnad his tail and flad"

:param str text: The text to normalize
:param bool return_logs: Return normalizer logs

normalization.lowercase
-----------------------

Lowercase the text


:example text: "Easy, Mungo, easy... Mungo..."
:example return: "easy, mungo, easy... mungo..."

:param str text: The text to normalize
:param bool return_logs: Return normalizer logs

normalization.regex
-------------------

Simple regex replace. By default the pattern is interpreted
case-sensitive.

Case-insensitivity is supported by adding inline modifiers.

You might want to use capturing groups to preserve the case. When replacing
a character not captured, the information about its case is lost...

Eg. would replace "HAHA! Hahaha!" to "HeHe! Hehehe!":

 +------------------+-------------+
 | search           | replace     |
 +==================+=============+
 | :code:`(?i)(h)a` | :code:`\1e` |
 +------------------+-------------+


No regex flags are set by default, you can set them yourself though in the
regex, and combine them at will, eg. multiline, dotall and ignorecase.

Eg. would replace "New<CRLF>line" to "newline":

 +------------------------+------------------+
 | search                 | replace          |
 +========================+==================+
 | :code:`(?msi)new.line` | :code:`newline`  |
 +------------------------+------------------+

:example text: "HAHA! Hahaha!"
:example search: '(?i)(h)a'
:example replace: r'\1e'
:example return: "HeHe! Hehehe!"

:param str text: The text to normalize
:param bool return_logs: Return normalizer logs

normalization.replace
---------------------

Simple search replace

:param str search: Text to search for
:param str replace: Text to replace with

:example text: "Nudge nudge!"
:example search: "nudge"
:example replace: "wink"
:example return: "Nudge wink!"

:param str text: The text to normalize
:param bool return_logs: Return normalizer logs

normalization.replacewords
--------------------------

Simple search replace that only replaces "words", the first letter will be
checked case insensitive as well with preservation of case..

:param str search: Word to search for
:param str replace: Replace with

:example text: "She has a heart of formica"
:example search: "a"
:example replace: "the"
:example return: "She has the heart of formica"

:param str text: The text to normalize
:param bool return_logs: Return normalizer logs

normalization.unidecode
-----------------------

Unidecode characters to ASCII form, see `Python's Unidecode package
<https://pypi.org/project/Unidecode>`_ for more info.

:example text: "𝖂𝖊𝖓𝖓 𝖎𝖘𝖙 𝖉𝖆𝖘 𝕹𝖚𝖓𝖘𝖙ü𝖈𝖐 𝖌𝖎𝖙 𝖚𝖓𝖉 𝕾𝖑𝖔𝖙𝖊𝖗𝖒𝖊𝖞𝖊𝖗?"
:example return: "Wenn ist das Nunstuck git und Slotermeyer?"

:param str text: The text to normalize
:param bool return_logs: Return normalizer logs

list.metrics
------------

Get a list of available core metrics

:return object: With key being the metrics name, and value its description

metrics.diffcounts
------------------

Get the amount of differences between reference and hypothesis

:param ref: Reference text
:param hyp: Hypothesis text

metrics.wer
-----------

Word Error Rate, basically defined as:

.. code-block:: text

    insertions + deletions + substitions
    ------------------------------------
         number of reference words

See: https://en.wikipedia.org/wiki/Word_error_rate

:param ref: Reference text
:param hyp: Hypothesis text

metrics.worddiffs
-----------------

Calculate the differences on a per-word basis

:param ref: Reference text
:param hyp: Hypothesis text

help
----

Returns available api methods

:return object: With key being the method name, and value its description

